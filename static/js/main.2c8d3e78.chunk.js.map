{"version":3,"sources":["api.ts","types/Status.ts","context/Context.tsx","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/Todo/todo.tsx","components/TodoList/TodoList.tsx","components/filteredTodos/filteredTodos.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Filter","getTodos","TContext","createContext","TProvider","children","useState","todos","setTodos","selectedTodos","setSelectedTodos","All","filter","setFilter","searchText","setSearchText","useEffect","catch","Error","contextValues","Provider","value","actions","todo","type","payload","currentTodoReducer","state","action","SET_FILTER","SET_SEARCH_TEXT","text","initialState","query","status","filterReducer","SET_TODOS","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","history","subscribe","getState","push","console","log","useAppDispatch","useDispatch","useAppSelector","useSelector","Todo","id","title","completed","userId","dispatch","className","onClick","cn","TodoList","filteredTodos","toLowerCase","includes","trim","filterTodos","length","map","TodoFilter","isClear","setIsClear","onChange","e","target","placeholder","Loader","TodoModal","loading","setLoading","user","setUser","undefined","userData","href","email","name","App","a","error","Root","ReactDOM","render","document","getElementById"],"mappings":"0NAYA,SAASA,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICnBKC,EDmBCC,EAAW,kBAAMZ,EAAY,Y,SCnB9BW,K,UAAAA,E,sBAAAA,E,iBAAAA,M,gBCqBNE,EAAWC,wBAAkC,MAM5C,SAASC,EAAT,GAA2D,IAAtCC,EAAqC,EAArCA,SAE1B,EAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CF,mBAAsB,MAAhE,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA4BJ,mBAAiBN,EAAOW,KAApD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCP,mBAAS,IAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRf,IAAWL,MAAK,SAAAG,GACdS,EAAST,MACRkB,OAAM,WACP,MAAM,IAAIC,MAAM,cAEjB,IAEH,IAAMC,EAA6B,CACjCZ,QACAC,WACAI,SACAC,YACAC,aACAC,gBACAN,gBACAC,oBAGF,OACE,cAACR,EAASkB,SAAV,CAAmBC,MAAOF,EAA1B,SAA0Cd,I,2BCpCjCiB,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA6BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MAEb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KACT,QACE,OAAOE,I,OClCPE,EAAa,oBACbC,EAAkB,yBAYXR,EACI,SAACS,GAAD,MAAmB,CAAEP,KAAMM,EAAiBL,QAASM,IADzDT,EAEA,SAACV,GAAD,MAAqB,CAAEY,KAAMK,EAAYJ,QAASb,IAQzDoB,EAAe,CACnBC,MAAO,GACPC,OAAQlC,EAAOW,KAoBFwB,EAjBO,WAAwC,IAAvCR,EAAsC,uDAA9BK,EAAcJ,EAAgB,uCAC3D,OAAQA,EAAOJ,MACb,KAAKK,EACH,OAAO,2BACFF,GADL,IAEEO,OAAQN,EAAOH,UAEnB,KAAKK,EACH,OAAO,2BACFH,GADL,IAEEM,MAAOL,EAAOH,UAElB,QACE,OAAOE,I,yBCxCAS,EAAY,kBAuBnBJ,EAA2B,CAC/BzB,MAAO,IAeM8B,EAZM,WAAuD,IAAtDV,EAAqD,uDAA7CK,EAAcJ,EAA+B,uCACzE,OAAQA,EAAOJ,OACRY,EACI,2BACFT,GADL,IAEEpB,MAAOqB,EAAOH,UAGTE,GC9BPW,EAAcC,0BAAgB,CAClCC,YAAad,EACbd,OAAQuB,EACR5B,MAAO8B,IAIII,EAAQC,sBACnBJ,EACAK,8BACEC,0BAAgBC,OAIdC,EAAe,GAErBL,EAAMM,WAAU,WACd,IAAMpB,EAAQc,EAAMO,WAGpBF,EAAQG,KAAKtB,GACbuB,QAAQC,IAAI,UAAWL,M,gBC3BZM,EAAoCC,IACpCC,EAAkDC,I,iBCSlDC,EAAwB,SAAC,GAE/B,IADLC,EACI,EADJA,GAAIC,EACA,EADAA,MAAOC,EACP,EADOA,UAAWC,EAClB,EADkBA,OAEhBnD,EAAgB6C,GAAe,SAAC3B,GAAD,OAAWA,EAAMa,eAChDqB,EAAWT,IAQjB,OAEE,qBAAI,UAAQ,OAAZ,UACE,oBAAIU,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,eAAd,SACGH,GACC,sBAAMG,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,oBACEA,UAAWH,EACP,mBAAqB,kBAF3B,UAIGD,EACAE,OAIL,oBAAIE,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVtC,KAAK,SACLuC,QAAS,WAhCfF,EAASvC,EAAgB,CACvBmC,KAAIC,QAAOC,YAAWC,aA2BpB,SAME,sBAAME,UAAU,OAAhB,SACE,mBAAGA,UAAWE,IAAG,MAAO,CACtB,UAAuB,OAAbvD,QAAa,IAAbA,OAAA,EAAAA,EAAegD,MAAOA,EAChC,gBAA6B,OAAbhD,QAAa,IAAbA,OAAA,EAAAA,EAAegD,MAAOA,gBC9C7C,IAAMQ,EAA4B,SAAC,GAAe,IAIjDC,ECND,YAA2D,IAApCtD,EAAmC,EAAnCA,OAAQE,EAA2B,EAA3BA,WAiBpC,OAjB+D,EAAfP,MACpBK,QAAO,SAACW,GAClC,OAAQX,GACN,IAAK,MACH,OAAOW,EAAKmC,MAAMS,cACfC,SAAStD,EAAWqD,cAAcE,QACvC,IAAK,YACH,OAAO9C,EAAKoC,WACTpC,EAAKmC,MAAMS,cAAcC,SAAStD,EAAWqD,cAAcE,QAChE,IAAK,SACH,OAAQ9C,EAAKoC,WACVpC,EAAKmC,MAAMS,cAAcC,SAAStD,EAAWqD,cAAcE,QAChE,QACE,OAAO,MDPSC,CAAY,CAAE/D,MAJkB,EAAZA,MAICK,OAH5B0C,GAAe,SAAC3B,GAAD,OAAWA,EAAMf,OAAOsB,UAGHpB,WAFhCwC,GAAe,SAAC3B,GAAD,OAAWA,EAAMf,OAAOqB,WAI1D,OACE,qCAC4B,IAAzBiC,EAAcK,QACb,mBAAGT,UAAU,0BAAb,iEAKF,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGI,EAAcM,KAAI,SAACjD,GAAD,OACjB,cAAC,EAAD,CAEEkC,GAAIlC,EAAKkC,GACTC,MAAOnC,EAAKmC,MACZC,UAAWpC,EAAKoC,UAChBC,OAAQrC,EAAKqC,QAJRrC,EAAKkC,gBEtCXgB,EAAuB,WAClC,MAA8BnE,oBAAS,GAAvC,mBAAOoE,EAAP,KAAgBC,EAAhB,KACM/D,EAAS0C,GAAe,SAAC3B,GAAD,OAAWA,EAAMf,OAAOsB,UAChDpB,EAAawC,GAAe,SAAC3B,GAAD,OAAWA,EAAMf,OAAOqB,SACpD4B,EAAWT,IAEjB,OACE,uBAAMU,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRzC,MAAOT,EACPgE,SAAU,SAACC,GAAD,OAAOhB,EAASvC,EAAkBuD,EAAEC,OAAOzD,SAHvD,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGyC,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRtC,KAAK,OACLsC,UAAU,QACViB,YAAY,YACZ1D,MAAOP,EACP8D,SAAU,SAACC,GACThB,EAASvC,EAAsBuD,EAAEC,OAAOzD,QACjB,KAAnBwD,EAAEC,OAAOzD,MACXsD,GAAW,GAEXA,GAAW,MAIjB,sBAAMb,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAhB,SACGY,GACC,wBACE,UAAQ,oBACRlD,KAAK,SACLsC,UAAU,SACVC,QAAS,WACPF,EAASvC,EAAsB,KAC/BqD,GAAW,IAEb,aAAW,0BCvDZK,G,MAAmB,kBAC9B,qBAAKlB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCENmB,EAAsB,WACjC,IAAMxE,EAAgB6C,GAAe,SAAC3B,GAAD,OAAWA,EAAMa,eACtD,EAA8BlC,oBAAS,GAAvC,mBAAO4E,EAAP,KAAgBC,EAAhB,KACA,EAAwB7E,mBAAsB,MAA9C,mBAAO8E,EAAP,KAAaC,EAAb,KAEMxB,EAAWT,IAgBjB,OAdApC,qBAAU,WbSW,IAAC4C,EaRhBnD,QAA0C6E,IAAzB7E,EAAcmD,QbQfA,EaPVnD,EAAcmD,ObOevE,EAAG,iBAAiBuE,KaNtDhE,MAAK,SAAC2F,GACLF,EAAQE,GACRJ,GAAW,MACVlE,OAAM,WACP,MAAM,IAAIC,MAAM,kBAGpBiE,GAAW,KAEZ,CAAC1E,IAGF,sBAAKqD,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdoB,EACC,cAAC,EAAD,IAEA,sBAAKpB,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,0BAKGrD,QALH,IAKGA,OALH,EAKGA,EAAegD,MAGlB,wBACEjC,KAAK,SACLsC,UAAU,SACV,UAAQ,cACR,aAAW,eACXC,QAAS,kBAAMF,EAASvC,WAI5B,sBAAKwC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGrD,QADH,IACGA,OADH,EACGA,EAAeiD,QAGjB0B,GACC,8BACE,oBAAGtB,UAAU,QAAQ,UAAQ,aAA7B,WAEiB,OAAbrD,QAAa,IAAbA,OAAA,EAAAA,EAAekD,YAChB,wBAAQG,UAAU,mBAAlB,oBAGC,OAACrD,QAAD,IAACA,KAAekD,YACjB,wBAAQG,UAAU,kBAAlB,qBAEA,IATH,KAWG,IACD,mBAAG0B,KAAI,iBAAYJ,EAAKK,OAAxB,SAAkCL,EAAKM,sBC7D5CC,EAAgB,WAC3B,IAAMlF,EAAgB6C,GAAe,SAAC3B,GAAD,OAAWA,EAAMa,eAEhDqB,EAAWT,IAEjBpC,qBAAU,WACR6C,ETPsB,uCAAM,WAAOA,GAAP,eAAA+B,EAAA,+EAET3F,IAFS,OAEtBF,EAFsB,OAI5B8D,EATwC,CAC1CrC,KAAMY,EACNX,QAOoB1B,IAJU,gDAM5BmD,QAAQ2C,MAAM,wBAAd,MAN4B,yDAAN,yDSQrB,CAAChC,IAEJ,IAAMtD,EAAQ+C,GAAe,SAAC3B,GAAD,OAAgBA,EAAMpB,MAAMA,SAEzD,OACE,qCACE,qBAAKuD,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,UACS,OAALvD,QAAK,IAALA,OAAA,EAAAA,EAAOgE,QAAS,EACd,cAAC,EAAD,CAAUhE,MAAOA,IACjB,cAAC,EAAD,aAMXE,GAAiB,cAAC,EAAD,QCjClBqF,EAAO,kBACX,cAAC,IAAD,CAAUrD,MAAOA,EAAjB,SACE,cAACrC,EAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,WAMR2F,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.2c8d3e78.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export type Status = 'all' | 'active' | 'completed';\n\nexport enum Filter {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React, {\n  ReactNode,\n  SetStateAction,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { Todo } from '../types/Todo';\nimport { getTodos } from '../api';\nimport { Filter } from '../types/Status';\n\nexport interface TypeContext {\n  todos: Todo[];\n  setTodos: React.Dispatch<SetStateAction<Todo[]>>;\n  selectedTodos: Todo | null;\n  setSelectedTodos: React.Dispatch<SetStateAction<Todo | null>>;\n  filter: Filter;\n  setFilter: React.Dispatch<SetStateAction<Filter>>;\n  searchText: string;\n  setSearchText: React.Dispatch<SetStateAction<string>>;\n}\n\nconst TContext = createContext<TypeContext | null>(null);\n\nexport function useTContext() {\n  return useContext(TContext);\n}\n\nexport function TProvider({ children }: { children: ReactNode }) {\n  // ponizej juz przejete przez redux zostawiam komponent do celów porównawczych\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodos, setSelectedTodos] = useState<Todo | null>(null);\n  const [filter, setFilter] = useState<Filter>(Filter.All);\n  const [searchText, setSearchText] = useState('');\n\n  useEffect(() => {\n    getTodos().then(json => {\n      setTodos(json);\n    }).catch(() => {\n      throw new Error('error');\n    });\n  }, []);\n\n  const contextValues: TypeContext = {\n    todos,\n    setTodos,\n    filter,\n    setFilter,\n    searchText,\n    setSearchText,\n    selectedTodos,\n    setSelectedTodos,\n  };\n\n  return (\n    <TContext.Provider value={contextValues}>{children}</TContext.Provider>\n  );\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","/* eslint-disable max-len */\nimport { Filter } from '../types/Status';\n\nconst SET_FILTER = 'filter/SET_FILTER';\nconst SET_SEARCH_TEXT = 'filter/SET_SEARCH_TEXT';\n\n// interface SetFilterAction {\n//   type: typeof SET_FILTER;\n//   payload: Filter;\n// }\n\n// interface SetSearchTextAction {\n//   type: typeof SET_SEARCH_TEXT;\n//   payload: string;\n// }\n\nexport const actions = {\n  setSearchText: (text: string) => ({ type: SET_SEARCH_TEXT, payload: text }),\n  setFilter: (filter: Filter) => ({ type: SET_FILTER, payload: filter }),\n};\n\n// interface FilterState {\n//   query: string;\n//   status: Filter;\n// }\n\nconst initialState = {\n  query: '',\n  status: Filter.All,\n};\n\nconst filterReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case SET_FILTER:\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case SET_SEARCH_TEXT:\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","/* eslint-disable no-console */\nimport { getTodos } from '../api';\nimport { Todo } from '../types/Todo';\n\nexport const SET_TODOS = 'todos/SET_TODOS';\n\nexport const setTodos = (todos: Todo[]) => ({\n  type: SET_TODOS,\n  payload: todos,\n});\n\nexport const fetchTodos = () => async (dispatch: any) => {\n  try {\n    const json = await getTodos();\n\n    dispatch(setTodos(json));\n  } catch (error) {\n    console.error('Error fetching todos:', error);\n  }\n};\n\ninterface TodosState {\n  todos: Todo[];\n}\n\ntype Action = ReturnType<typeof setTodos>;\n\nconst initialState: TodosState = {\n  todos: [],\n};\n\nconst todosReducer = (state = initialState, action: Action): TodosState => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","/* eslint-disable no-console */\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n// to nam pozwala na sledzenie zmian w storze\nconst history: any = [];\n\nstore.subscribe(() => {\n  const state = store.getState();\n\n  // console.log('state', state);\n  history.push(state);\n  console.log('history', history);\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n};\n\nexport const Todo: React.FC<Props> = ({\n  id, title, completed, userId,\n}) => {\n  const selectedTodos = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  function handleClick() {\n    dispatch(actions.setTodo({\n      id, title, completed, userId,\n    }));\n  }\n\n  return (\n\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={completed\n            ? 'has-text-success' : 'has-text-danger'}\n        >\n          {title}\n          {userId}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleClick()}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': selectedTodos?.id !== id,\n              'fa-eye-slash': selectedTodos?.id === id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../Todo/todo';\nimport { filterTodos } from '../filteredTodos/filteredTodos';\n\ntype Props = {\n  // wygodniej dac any bo nazwa typu Todo pokrywa sie z nazwa komponentu Todo\n  todos: any[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const filter = useAppSelector((state) => state.filter.status);\n  const searchText = useAppSelector((state) => state.filter.query);\n  // przekazanie todos do filtrowania\n  const filteredTodos = filterTodos({ todos, filter, searchText });\n\n  return (\n    <>\n      {filteredTodos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map((todo) => (\n            <Todo\n              key={todo.id}\n              id={todo.id}\n              title={todo.title}\n              completed={todo.completed}\n              userId={todo.userId}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { Filter } from '../../types/Status';\n\ntype Args = {\n  todos: Todo[],\n  filter: Filter,\n  searchText: string,\n};\n\nexport function filterTodos({ filter, searchText, todos }: Args) {\n  const filteredTodos = todos.filter((todo) => {\n    switch (filter) {\n      case 'all':\n        return todo.title.toLowerCase()\n          .includes(searchText.toLowerCase().trim());\n      case 'completed':\n        return todo.completed\n        && todo.title.toLowerCase().includes(searchText.toLowerCase().trim());\n      case 'active':\n        return !todo.completed\n        && todo.title.toLowerCase().includes(searchText.toLowerCase().trim());\n      default:\n        return true;\n    }\n  });\n\n  return filteredTodos;\n}\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { Filter } from '../../types/Status';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const [isClear, setIsClear] = useState(false);\n  const filter = useAppSelector((state) => state.filter.status);\n  const searchText = useAppSelector((state) => state.filter.query);\n  const dispatch = useAppDispatch();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={(e) => dispatch(actions.setFilter(e.target.value as Filter))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchText}\n          onChange={(e) => {\n            dispatch(actions.setSearchText(e.target.value));\n            if (e.target.value !== '') {\n              setIsClear(true);\n            } else {\n              setIsClear(false);\n            }\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\">\n          {isClear && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                dispatch(actions.setSearchText(''));\n                setIsClear(false);\n              }}\n              aria-label=\"Clear Search\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const selectedTodos = useAppSelector((state) => state.currentTodo);\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (selectedTodos && selectedTodos.userId !== undefined) {\n      getUser(selectedTodos.userId)\n        .then((userData) => {\n          setUser(userData);\n          setLoading(false);\n        }).catch(() => {\n          throw new Error('error modal');\n        });\n    } else {\n      setLoading(false);\n    }\n  }, [selectedTodos]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodos?.id}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close-button\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodos?.title}\n            </p>\n\n            {user && (\n              <div>\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {\n                    selectedTodos?.completed\n                && <strong className=\"has-text-success\">Done</strong>\n                  }\n                  {\n                    !selectedTodos?.completed\n                && <strong className=\"has-text-danger\">Planned</strong>\n                  }\n                  {' '}\n                  by\n                  {' '}\n                  <a href={`mailto:${user.email}`}>{user.name}</a>\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { fetchTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const selectedTodos = useAppSelector((state) => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n  }, [dispatch]);\n  // any ze wzgl na konflikty w nazwach\n  const todos = useAppSelector((state: any) => state.todos.todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {(todos?.length > 0)\n                ? <TodoList todos={todos} />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodos && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { TProvider } from './context/Context';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <TProvider>\n      <Router>\n        <App />\n      </Router>\n    </TProvider>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}